package org.example.spring.integration;

import org.example.spring.database.pool.ConnectionPool;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.SpyBean;

/**
 *  Этот runner используется для того, что бы создавать
 *  конфигурацию для всех тестов. Для того чтобы не создавалось
 *  несколько application-ов
 * <p>
 *  Это за кешированный контекст.
 * <p>
 *  {@code @TestConfiguration} - это аннотация из Spring Framework, которая используется в тестировании для определения
 *  специальных конфигурационных классов, предназначенных только для тестов. Эта аннотация помогает создавать
 *  конфигурационные классы, которые будут использоваться только в контексте выполнения тестов, и не будут влиять
 *  на реальный контекст вашего приложения.
 * <p>
 * Основные характеристики @TestConfiguration:
 * <p>
 * Локальная конфигурация для тестов: Классы, помеченные @TestConfiguration, аналогичны обычным конфигурационным
 * классам (@Configuration), но они предназначены только для тестов. Это позволяет вам настраивать контекст приложения
 * специально для тестовых целей.
 * <p>
 * Изоляция тестов: Использование @TestConfiguration помогает изолировать настройки и бины, необходимые для выполнения
 * конкретных тестов. Это может быть полезно, чтобы избежать влияния настройок тестов на реальное приложение и наоборот.
 * <p>
 * Определение тестовых бинов: Вы можете определять бины и настройки, специфичные для вашего теста, в классах,
 * помеченных @TestConfiguration, и эти бины будут доступны только в контексте вашего теста.
 */
@TestConfiguration
public class TestApplicationRunner {

    /**
     * {@code @SpyBean} - это аннотация из Spring Framework, которая используется в тестировании с использованием фреймворка
     * Spring Boot и Mockito для создания "шпионских" (spy) бинов. Шпион - это объект, который поддерживает реальную
     * реализацию бина, но также может записывать вызовы методов и их аргументы, что полезно для проверки и верификации
     * поведения ваших бинов.
     * <p>
     * Вот как работает @SpyBean:
     * <p>
     * Создание шпионского бина: Аннотация @SpyBean создает шпионский бин, который основан на реальной реализации бина.
     * Это означает, что большинство методов вызываются настоящей реализацией бина, но вы также можете настроить его
     * для записи вызовов.
     * <p>
     * Использование в тестах: Ваши тесты могут использовать шпионский бин для выполнения методов на реальной
     * реализации и проверки вызовов методов или аргументов.
     */
    @SpyBean(name = "connectionPool")
    private ConnectionPool connectionPool;
}
