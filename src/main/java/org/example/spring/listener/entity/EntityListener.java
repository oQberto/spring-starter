package org.example.spring.listener.entity;

import org.springframework.context.event.EventListener;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

/**
 * Аннотация @Component является одной из базовых аннотаций в Spring Framework и используется для указания, что класс
 * является компонентом (bean'ом), который должен быть обнаружен и зарегистрирован в контексте приложения Spring.
 * Компоненты представляют собой обычные классы, которые управляются Spring и могут быть внедрены (инжектированы) в
 * другие компоненты вашего приложения.
 * <p>
 * Основные характеристики и использование аннотации @Component:
 * <p>
 * Обнаружение и регистрация бинов: Класс, помеченный аннотацией @Component, автоматически обнаруживается Spring и
 * регистрируется как бин в контексте приложения. Это упрощает создание и управление бинами без необходимости явного
 * указания их в конфигурации.
 * <p>
 * Инъекция зависимостей: Классы, помеченные @Component, могут быть инъектированы в другие компоненты, используя аннотации
 * вроде @Autowired. Это позволяет внедрять зависимости между компонентами и управлять их жизненным циклом с помощью Spring.
 * <p>
 * Используется вместе с другими аннотациями: @Component часто используется вместе с другими аннотациями, такими
 * как @Service, @Repository и @Controller, чтобы более точно указать тип компонента и его роль в приложении.
 * Эти аннотации наследуют функциональность @Component и являются специализированными видами компонентов.
 */
@Component
public class EntityListener {

    /**
     * {@code @EventListener} - это аннотация в Spring Framework, которая используется для обработки событий в приложении.
     * Она позволяет вам определить методы, которые будут вызываться в ответ на определенные события,
     * и реагировать на них. Это часть механизма управления событиями в Spring.
     * <p>
     * Основные характеристики и использование аннотации @EventListener:
     * <p>
     * Обработка событий: Аннотация @EventListener применяется к методам, которые должны быть вызваны при
     * возникновении определенных событий. Эти методы будут автоматически вызываться Spring в ответ
     * на опубликованные события.
     * <p>
     * Инъекция событий: Методы, помеченные @EventListener, могут принимать аргументы события, которые будут
     * автоматически инъектированы Spring во время вызова метода. Это позволяет вам получать информацию о событии
     * и реагировать на него.
     * <p>
     * Поддержка асинхронности: Вы можете указать, что метод, помеченный @EventListener, должен выполняться асинхронно
     * с помощью аннотации @Async, что позволяет обрабатывать события в фоновом режиме.
     */
    @EventListener(condition = "#root.args[0].accessType.name() == 'READ'")
    @Order(10)
    public void acceptEntityRead(EntityEvent entityEvent) {
        System.out.println("Entity: " + entityEvent);
    }
}
