package org.example.spring.database.repository;

import org.example.spring.database.entity.Company;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.Optional;

/**
 * Spring Data JPA предоставляет различные способы выполнения запросов к базе данных с использованием интерфейсов
 * репозитория и методов, определенных в этих интерфейсах. Реализации RepositoryQuery являются внутренней частью
 * Spring Data JPA и обеспечивают выполнение запросов к базе данных на основе сигнатур методов репозитория.
 * Вот несколько основных реализаций RepositoryQuery:
 * <p>
 * {@link org.springframework.data.jpa.repository.query.PartTreeJpaQuery}: Это реализация RepositoryQuery, используемая для выполнения запросов, созданных на основе
 * именованных методов репозитория. Она разбирает имя метода репозитория и создает запрос на основе именованных
 * параметров метода. Например, метод с именем findByFirstNameAndLastName будет преобразован в запрос, который
 * выполняет поиск записей по имени и фамилии.
 * <p>
 * StringQuery: Это реализация, которая позволяет определить запрос к базе данных в виде строки с использованием
 * аннотации @Query над методом репозитория. Вы можете написать SQL-запрос или JPQL-запрос и использовать параметры
 * метода в запросе.
 * <p>
 * NativeJpaQuery: Это реализация, которая позволяет выполнять нативные SQL-запросы к базе данных. Она используется
 * с аннотацией @Query и позволяет написать SQL-запрос, который будет выполнен "как есть" без преобразования.
 * <p>
 * NamedQuery: Spring Data JPA также поддерживает именованные запросы, которые могут быть определены в метаданных
 * сущности с помощью аннотации @NamedQuery. Реализация RepositoryQuery для именованных запросов позволяет вызывать
 * их из методов репозитория.
 * <p>
 * PartTreeJpaQuery: Эта реализация используется для выполнения запросов, созданных на основе методов репозитория,
 * с использованием именованных параметров. Например, метод с именем findByFirstNameAndLastName будет преобразован
 * в запрос, который выполняет поиск записей по имени и фамилии.
 * <p>
 * Эти реализации RepositoryQuery являются частью механизма Spring Data JPA, который позволяет автоматически
 * генерировать SQL-запросы и выполнение операций с базой данных на основе сигнатур методов репозитория.
 * Разработчики могут использовать аннотации, именованные запросы и другие способы определения запросов
 * к базе данных в своих репозиториях для упрощения доступа к данным.
 * <p></p>
 * JpaRepository - это интерфейс, предоставляемый Spring Data JPA, который расширяет PagingAndSortingRepository и добавляет ещё несколько методов для удобной работы с базой данных. Он предоставляет более богатый набор методов для выполнения запросов и манипуляции данными, что делает его мощным инструментом для доступа к данным в базе данных с использованием Spring Data JPA.
 * <p>
 * Вот некоторые из основных методов, предоставляемых JpaRepository:
 * <p>
 * {@code save(S entity)}: Метод для сохранения или обновления сущности в базе данных. Если сущность существует, то она обновляется, в противном случае создается новая запись.
 * <p>
 * {@code saveAll(Iterable<S> entities)}: Метод для сохранения или обновления коллекции сущностей в базе данных.
 * <p>
 * {@code findById(ID id)}: Метод для поиска сущности по ее идентификатору. Возвращает Optional, который может содержать сущность, если она найдена.
 * <p>
 * {@code existsById(ID id)}: Метод, который проверяет наличие сущности с заданным идентификатором в базе данных и возвращает true, если она существует, и false в противном случае.
 * <p>
 * {@code findAll()}: Метод для получения всех сущностей из базы данных. Возвращает список сущностей.
 * <p>
 * {@code findAllById(Iterable<ID> ids)}: Метод для получения коллекции сущностей по списку идентификаторов.
 * <p>
 * {@code count()}: Метод для получения общего количества сущностей в базе данных.
 * <p>
 * {@code deleteById(ID id)}: Метод для удаления сущности по ее идентификатору.
 * <p>
 * {@code delete(S entity)}: Метод для удаления конкретной сущности из базы данных.
 * <p>
 * {@code deleteAll()}: Метод для удаления всех сущностей из базы данных.
 * <p>
 * {@code deleteAll(Iterable<? extends S> entities)}: Метод для удаления коллекции сущностей из базы данных.
 * <p>
 * {@code flush()}: Метод для немедленной синхронизации изменений с базой данных. Этот метод может использоваться, чтобы убедиться, что все изменения, сделанные в памяти, были сохранены в базе данных.
 * <p>
 * {@code saveAndFlush(S entity)}: Метод для сохранения сущности и немедленной синхронизации с базой данных.
 * <p>
 * {@code deleteInBatch(Iterable<T> entities)}: Метод для удаления коллекции сущностей в одной транзакции.
 * <p>
 * {@code findAll(Specification<T> spec)}: Метод для выполнения запроса с использованием спецификации (критериев) Specification.
 * <p>
 * {@code findAll(Specification<T> spec, Pageable pageable)}: Метод для выполнения запроса с использованием спецификации и объекта Pageable.
 * <p></p>
 * <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods">For more query patterns:</a>
 */
public interface CompanyRepository extends JpaRepository<Company, Integer> {

    /**
     * Аннотация @Query является частью Java Persistence API (JPA) и используется для определения пользовательских
     * SQL- или JPQL-запросов в JPA-сущности или репозитории. Она предоставляет возможность явно определить запрос,
     * который будет выполнен при взаимодействии с базой данных. @Query может использоваться для выборки данных,
     * вставки, обновления и удаления данных.
     */
    @Query(value = "select c from Company c join fetch c.locales cl where c.name = :name")
    Optional<Company> findByName(String name);

    List<Company> findAllByNameContainingIgnoreCase(String fragment);
}
