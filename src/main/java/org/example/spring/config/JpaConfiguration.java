package org.example.spring.config;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.example.spring.config.condition.JpaCondition;
import org.springframework.context.annotation.Conditional;
import org.springframework.context.annotation.Configuration;

/**
 * {@code @Conditional} - это аннотация в Spring Framework, которая используется для условной конфигурации компонентов и бинов
 * в зависимости от определенных условий. Она позволяет определять, должен ли бин быть создан и зарегистрирован в
 * контексте приложения на основе условий, заданных разработчиком.
 * <p>
 * Основные характеристики и использование аннотации @Conditional:
 * <p>
 * Условная конфигурация: @Conditional позволяет вам определять условия, при которых бин должен быть создан и
 * зарегистрирован, а при каких условиях нет. Это может быть полезно, например, для включения или выключения компонентов
 * в зависимости от активных профилей, наличия классов в classpath, настроек или других факторов.
 * <p>
 * Использование с другими аннотациями: @Conditional может быть комбинирована с другими аннотациями, такими как
 * {@code @Component,} @Configuration, @Bean и другими, чтобы определить, какие компоненты или бины должны быть созданы на
 * основе условий.
 * <p>
 * Пользовательские условия: Вы также можете создавать собственные классы условий, реализуя интерфейс
 * org.springframework.context.annotation. Condition и передавая экземпляры этих классов в @Conditional.
 * Это позволяет определить собственные логику условий.
 * <p></p>
 *
 * {@code @Configuration} - это аннотация в Spring Framework, которая используется для указания класса как источника
 * конфигурации для Spring контейнера. Классы, помеченные @Configuration, могут содержать бины, методы конфигурации
 * и другие настройки, которые необходимы для настройки и инициализации компонентов в приложении.
 * <p>
 * Основные характеристики и использование аннотации @Configuration:
 * <p>
 * Источник конфигурации: Классы, помеченные @Configuration, служат источниками конфигурации Spring контейнера.
 * Это означает, что они могут содержать бины и методы, которые определяют, какие компоненты должны быть созданы и
 * как они должны быть сконфигурированы.
 * <p>
 * Бины и методы конфигурации: В классах @Configuration вы можете использовать аннотации, такие как @Bean,
 * {@code @ComponentScan,} @Import и другие, для определения бинов и настроек. Методы, помеченные @Bean, создают и настраивают
 * бины, которые будут управляться Spring.
 * <p>
 * Комбинирование конфигураций: Вы можете создавать несколько классов @Configuration и комбинировать их для определения
 * разных частей конфигурации приложения. Это удобно, когда ваше приложение разделено на модули с разной конфигурацией.
 */
@Slf4j
@Conditional(JpaCondition.class)
@Configuration
public class JpaConfiguration {

//    @Bean
//    @ConfigurationProperties(prefix = "db")
//    public DatabaseProperties databaseProperties() {
//        return new DatabaseProperties();
//    }

    @PostConstruct
    void init() {
        log.info("Jpa configuration is enable");
    }
}
